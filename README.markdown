# Document Quality API - Руководство

## Обзор
API для оценки качества документов на базе FastAPI представляет собой автономную службу, предназначенную для классификации типов документов и оценки качества текста на загруженных изображениях или PDF-файлах. Используя YOLO для обнаружения документов и PaddleOCR для извлечения текста, API оптимизирован для работы с русскоязычными документами и работает в контейнере Docker с поддержкой NVIDIA GPU. Эта версия обновлена по состоянию на 18 июня 2025 года и ориентирована на простоту и эффективность для интеграции с системами, такими как 1C.

### Основные возможности
- Классификация документов на типы, такие как паспорта, ИНН, СНИЛС и др.
- Оценка качества текста с категориями "Плохо" или "Отлично".
- Возвращение обрезанных областей интереса (ROI) в виде загружаемых URL.
- Поддержка пакетной обработки до 10 файлов за запрос.
- Обработка нескольких документов в одном изображении или странице PDF.

### Поддерживаемые типы документов
- Паспорт (Российская Федерация)
- ИНН
- СНИЛС
- Свидетельство о регистрации
- Документы на детей
- Миграционные карты

---

## Рабочий процесс системы
1. **Загрузка**: Отправьте изображения или PDF-файлы через POST-запрос к API.
2. **Обработка**: API обнаруживает документы, оценивает качество, обрезает ROI и сохраняет их в статическом каталоге.
3. **Ответ**: Возвращает JSON-ответ с `doc_type`, `quality_category` и URL для `cropped_roi` для каждого обнаруженного документа.

---

## Требования

### Аппаратное обеспечение
| Компонент    | Минимальные требования      | Рекомендуемые требования    |
|--------------|-----------------------------|-----------------------------|
| **GPU**      | NVIDIA RTX 3060 (12 ГБ VRAM) | NVIDIA RTX 3090 (24 ГБ VRAM) |
| **CPU**      | Intel i7-12700K            | AMD Ryzen 9 7950X           |
| **RAM**      | 32 ГБ DDR4                 | 64 ГБ DDR5                  |
| **Хранилище**| 512 ГБ SSD                 | 1 ТБ NVMe SSD               |

### Программное обеспечение
- **Docker**: Установлен с NVIDIA Container Toolkit для ускорения GPU.
- **Операционная система**: Windows или Linux.

---

## Инструкции по установке

### 1. Клонирование репозитория
```bash
git clone <repository-url>
cd Document-Quality-API
```

### 2. Сборка и запуск контейнера Docker
- **Настройка хранилища**: Отредактируйте `docker/docker-compose.yml`, чтобы сопоставить локальный каталог с `/app/api/static` (например, `/path/to/host/storage:/app/api/static`) для хранения обрезанных изображений.
- **Запуск**:
  ```bash
  docker-compose -f docker/docker-compose.yml up -d
  ```
- API будет доступен по адресу `http://localhost:8000`.

### 3. Проверка развертывания
- Откройте `http://localhost:8000/` для подтверждения работы службы (возвращает `{"message": "Model loaded successfully!"}`).

---

## Использование API

### Эндпоинт: `/batch-quality-assessment/`
#### Запрос
- **Метод**: POST
- **URL**: `http://<api-host>:8000/batch-quality-assessment/`
- **Content-Type**: `multipart/form-data`
- **Тело**: До 10 файлов (изображения или PDF).
- **Пример**:
  ```bash
  curl -X POST http://localhost:8000/batch-quality-assessment/ \
    -F "files=@document1.jpg" \
    -F "files=@document2.pdf"
  ```

#### Ответ
- **Формат**: Массив объектов в формате JSON.
- **Поля**:
  - `filename`: Имя загруженного файла.
  - `result`: Список обнаруженных документов, каждый из которых содержит:
    - `doc_type`: Тип документа (например, "passport").
    - `quality_category`: Оценка качества ("Плохо" или "Отлично").
    - `cropped_roi`: URL для загрузки обрезанного изображения.
  - `error`: Сообщение об ошибке (если применимо).
- **Пример ответа**:
  ```json
  [
    {
      "filename": "document1.jpg",
      "result": [
        {
          "doc_type": "passport",
          "quality_category": "Отлично",
          "cropped_roi": "http://localhost:8000/static/cropped_docs/abc123.jpg"
        },
        {
          "doc_type": "inn",
          "quality_category": "Плохо",
          "cropped_roi": "http://localhost:8000/static/cropped_docs/def456.jpg"
        }
      ],
      "error": null
    },
    {
      "filename": "document2.pdf",
      "result": [
        {
          "doc_type": "snils",
          "quality_category": "Отлично",
          "cropped_roi": "http://localhost:8000/static/cropped_docs/ghi789.jpg"
        }
      ],
      "error": null
    }
  ]
  ```
- **Примечания**:
  - Один файл может содержать несколько документов, каждый из которых возвращается как отдельный объект в `result`.
  - PDF-файлы обрабатываются страница за страницей, каждая страница рассматривается как отдельный файл (например, "document.pdf_page1.jpg").

---

## Для отдела 1C

### Как взаимодействовать
1. **Отправка запроса**: Используйте POST-запрос к `/batch-quality-assessment/` с файлами документов.
2. **Анализ ответа**: Ожидайте массив JSON, где каждый файл может содержать несколько записей в `result`.
3. **Использование результатов**:
   - `doc_type`: Определите тип документа.
   - `quality_category`: Определите пригодность документа ("Отлично" или "Плохо").
   - `cropped_roi`: Получите доступ к обрезанному изображению по указанному URL для дальнейшей обработки или хранения.

### Примечания по интеграции
- Обрабатывайте несколько документов в одном файле, итерируясь по списку `result`.
- Проверяйте поле `error` для обработки случаев сбоев (например, некорректные файлы).
- Если необходимо, сохраняйте изображения `cropped_roi` локально, загружая их по URL.

---

## Руководство для пользователей репозитория
Если вы клонировали этот репозиторий для тестирования API:

### Установка
1. Установите Docker и NVIDIA Container Toolkit.
2. Клонируйте репозиторий и перейдите в директорию:
   ```bash
   git clone <repository-url>
   cd Document-Quality-API
   ```
3. Обновите `docker/docker-compose.yml`, указав действительный путь хоста для тома `/app/api/static` (например, `/home/user/storage:/app/api/static`).
4. Запустите контейнер:
   ```bash
   docker-compose -f docker/docker-compose.yml up -d
   ```

### Тестирование API
- Отправьте тестовый запрос:
  ```bash
  curl -X POST http://localhost:8000/batch-quality-assessment/ \
    -F "files=@test_image.jpg"
  ```
- Проверьте ответ, включая `doc_type`, `quality_category` и действительный URL `cropped_roi`.
- Откройте URL `cropped_roi` (например, `http://localhost:8000/static/cropped_docs/abc123.jpg`) в браузере для загрузки изображения.

### Устранение неполадок
- **Проблемы с GPU**: Убедитесь, что установлены драйверы NVIDIA и Container Toolkit. Проверьте логи с помощью `docker logs <container-name>`.
- **Хранилище**: Подтвердите, что путь тома доступен и доступен для записи.
- **Ошибки**: Изучите файл `app.log` в контейнере для получения подробных сообщений об ошибках.

---

## Учет производительности
- Протестировано на NVIDIA RTX 3070 (8 ГБ VRAM), 2 × Xeon E5-2696 v3 (36 потоков), 64 ГБ RAM.
- Обрабатывает до 10 одновременных файлов эффективно; средняя задержка запроса составляет 427 мс.

---

## Перспективы улучшений
- Расширение поддержки дополнительных типов документов (например, иностранных паспортов).
- Улучшение оценки качества с использованием большего количества размеченных данных.

---

## Контакты
Для поддержки или вопросов обращайтесь:
- **Имя**: Назих Эррахел (Nazih Errahel)
- **Email**: [Укажите адрес электронной почты]